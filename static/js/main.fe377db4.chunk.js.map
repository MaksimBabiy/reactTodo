{"version":3,"sources":["context.js","Todo.js/TodoItem.js","Todo.js/TodoList.js","Todo.js/Loader.js","Modal/Modal.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","TodoItem","todo","id","title","onChange","index","removeTodo","useContext","classes","completed","push","className","join","type","checked","onClick","bind","TodoList","props","todos","map","item","key","onToggle","styles","display","justifyContent","margin","Modal","state","isOpen","Fragment","setState","this","Component","AddTodos","lazy","App","useState","setTodos","loading","setLoading","useEffect","console","log","fetch","then","response","json","setTimeout","Provider","value","filter","Suspense","fallback","onCreate","concat","Date","now","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8PAIeA,EAFCC,IAAMC,gB,qEC0BPC,MAxBf,YAAoD,IAAhCC,EAA+B,EAA/BA,KAAKC,EAA0B,EAA1BA,GAAGC,EAAuB,EAAvBA,MAAMC,EAAiB,EAAjBA,SAASC,EAAQ,EAARA,MAC/BC,EAAeR,IAAMS,WAAWV,GAAhCS,WACFE,EAAU,GAIhB,OAHGP,EAAKQ,WACJD,EAAQE,KAAK,QAGjB,4BACC,0BAAMC,UAAWH,EAAQI,KAAV,MACf,2BAAOC,KAAK,WAAWC,QAASb,EAAKQ,UAAWL,SAAU,kBAAKA,EAASF,MACxE,gCAASG,EAAQ,GAFjB,OAICF,GAED,4BAAQQ,UAAU,SAASI,QAAST,EAAWU,KAAK,KAAKd,IAAzD,UCAUe,MAdf,SAAkBC,GACd,OACI,4BACKA,EAAMC,MAAMC,KAAK,SAACC,EAAKhB,GACpB,OAAO,kBAAC,EAAD,CAAUJ,KAAMoB,EAAMC,IAAKD,EAAKnB,GAAIA,GAAImB,EAAKnB,GAAIG,MAAOA,EAAOF,MAAOkB,EAAKlB,MAAOC,SAAUc,EAAMK,gBCN1G,oBAAM,yBAAKC,OAAQ,CAACC,QAAU,OAAQC,eAAgB,SAAUC,OAAQ,UAAU,yBAAKhB,UAAU,oB,mCCA3FiB,G,iNACjBC,MAAQ,CACJC,QAAQ,G,wEAGF,IAAD,OACL,OACI,kBAAC,IAAMC,SAAP,KACI,4BAAQhB,QAAS,kBAAK,EAAKiB,SAAU,CAACF,QAAQ,MAA9C,cACEG,KAAKJ,MAAMC,QACb,yBAAKnB,UAAU,SACX,yBAAKA,UAAU,cACX,2CACA,mDACA,4BAAQI,QAAS,kBAAK,EAAKiB,SAAU,CAACF,QAAQ,MAA9C,uB,GAdWhC,IAAMoC,YCInCC,EAAWrC,IAAMsC,MAAK,kBAAK,gCAyDlBC,MAvDf,WAAgB,IAAD,EAEUvC,IAAMwC,SAAS,IAFzB,mBAERnB,EAFQ,KAEFoB,EAFE,OAGezC,IAAMwC,UAAS,GAH9B,mBAGRE,EAHQ,KAGCC,EAHD,KAsCb,OAjCFC,qBAAU,WACRC,QAAQC,IAAI,gDACZC,MAAM,wDACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA3B,GACJ8B,YAAW,WACTV,EAASpB,GACTsB,GAAW,KACX,UAGJ,IAuBE,kBAAC,EAAQS,SAAT,CAAkBC,MAAO,CAAC7C,WAZ9B,SAAoBJ,GAClBqC,EAASpB,EAAMiC,QAAO,SAAA/B,GAAI,OAAIA,EAAKnB,KAAOA,SAYxC,yBAAKS,UAAU,aACf,8CACK6B,EAAW,KAAO,yBAAK7B,UAAU,eAClC,kBAAC,EAAD,MACA,kBAAC,IAAM0C,SAAP,CAAgBC,SAAU,2CAC1B,kBAACnB,EAAD,CAAUoB,SAflB,SAAiBpD,GACfoC,EAASpB,EAAMqC,OAAO,CAAC,CACrBrD,QACAD,GAAIuD,KAAKC,MACTjD,WAAW,WAcN+B,GAAW,kBAAC,EAAD,MACXrB,EAAMwC,OAAS,kBAAC,EAAD,CAAUxC,MAAOA,EAAOI,SAhChD,SAAoBrB,GAClBqC,EACEpB,EAAMC,KAAI,SAAAC,GAIR,OAHGA,EAAKnB,KAAOA,IACbmB,EAAKZ,WAAaY,EAAKZ,WAElBY,SA0B8DmB,EAAU,KAAO,2CC7CxEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.fe377db4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Context = React.createContext()\r\n\r\nexport default Context","import React from 'react';\r\nimport PropsTypes from 'prop-types';\r\nimport Context from '../context'\r\n\r\nfunction TodoItem({ todo,id,title,onChange,index }){\r\n    const { removeTodo } = React.useContext(Context)\r\n    const classes = []\r\n    if(todo.completed){\r\n        classes.push('done')\r\n    }\r\n    return (\r\n    <li>\r\n     <span className={classes.join``}>\r\n     <input type=\"checkbox\" checked={todo.completed} onChange={()=> onChange(id)}/>\r\n     <strong>{index + 1}</strong>\r\n     &nbsp;\r\n     {title}\r\n     </span> \r\n     <button className=\"delete\" onClick={removeTodo.bind(null,id)}>&times;</button>\r\n     </li>\r\n    )}\r\n\r\nTodoItem.propTypes = {\r\n    id: PropsTypes.number,\r\n    title: PropsTypes.string.isRequired,\r\n    onChange: PropsTypes.func.isRequired\r\n}\r\n\r\nexport default TodoItem","import React from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropsTypes from 'prop-types';\r\n\r\nfunction TodoList(props){\r\n    return (\r\n        <ul>\r\n            {props.todos.map( (item,index) => {\r\n                return <TodoItem todo={item} key={item.id} id={item.id} index={index} title={item.title} onChange={props.onToggle}/>\r\n            })}\r\n        </ul>\r\n    )\r\n}\r\nTodoList.propTypes = {\r\n    todos: PropsTypes.arrayOf(PropsTypes.object).isRequired,\r\n    onToggle: PropsTypes.func.isRequired\r\n}\r\n\r\nexport default TodoList","import React from 'react';\r\n\r\nexport default () => <div styles={{display : 'flex', justifyContent: 'center', margin: '.5rem'}}><div className=\"lds-hourglass\"></div></div>","import React from 'react';\r\nimport './modal.css'\r\nexport default class Modal extends React.Component {\r\n    state = {\r\n        isOpen: false\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <button onClick={()=> this.setState( {isOpen: true})}>Open Modal</button>\r\n                { this.state.isOpen && (\r\n                <div className=\"modal\">\r\n                    <div className=\"modal-body\">\r\n                        <h1>Modal title</h1>\r\n                        <p>i am awersome modal!</p>\r\n                        <button onClick={()=> this.setState( {isOpen: false})}>Close modal!</button>\r\n                    </div>\r\n                </div>)}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}","import React, {useEffect} from 'react';\nimport TodoList from './Todo.js/TodoList';\nimport Context from './context';\nimport Loading from './Todo.js/Loader'\nimport Modal from './Modal/Modal'\n\nconst AddTodos = React.lazy(()=> import('./Todo.js/AddTodos'))\n\nfunction App() {\n\nconst [todos,setTodos] = React.useState([])\nconst [loading, setLoading] = React.useState(true)\n\nuseEffect(()=>{\n  console.log('ReactJS 2019(Context, Hooks, Lazy, Suspense)')\n  fetch('https://jsonplaceholder.typicode.com/todos?_limit=10')\n  .then(response => response.json())\n  .then(todos => {\n    setTimeout(()=> {\n      setTodos(todos)\n      setLoading(false)\n    },2000)\n    \n  })\n},[])\nfunction toggleTodo(id){\n  setTodos(\n    todos.map(item=> {\n      if(item.id === id){\n        item.completed = !item.completed\n      }\n      return item\n    })\n  )\n}\nfunction removeTodo(id){\n  setTodos(todos.filter(item => item.id !== id))\n}\nfunction addTodo(title){\n  setTodos(todos.concat([{\n    title,\n    id: Date.now(),\n    completed: false\n  }]))\n}\n\n  return (\n    <Context.Provider value={{removeTodo}}>\n    <div className=\"container\">\n    <h1>React Tutorial</h1>\n        {loading ?  null : <div className='mainContent'>\n        <Modal />\n        <React.Suspense fallback={<p>Loading....</p>}>\n        <AddTodos onCreate={addTodo}></AddTodos>\n        </React.Suspense>\n        </div>}\n        {loading && <Loading />}\n        {todos.length ? <TodoList todos={todos} onToggle={toggleTodo}/> :  loading ? null :(<p>No Todos!</p>)}\n    </div>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}